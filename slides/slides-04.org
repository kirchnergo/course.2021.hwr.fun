#+TITLE: Funktionale Programmierung in F# (4)
#+BEAMER_HEADER: \subtitle{Domain Driven Design \& Property Based Testing}

#+AUTHOR: Göran Kirchner
#+EMAIL: e_kirchnerg@doz.hwr-berlin.de
#+DATE: 2021-04-09

# #+BEAMER_HEADER: \institute[INST]{\href{http://www.rki.de/EN}{Robert Koch Institute}}
# #+BEAMER_HEADER: \logo{\pgfputat{\pgfxy(-0.8,7.5)}{\pgfbox[center,base]{\includegraphics[width=1.6cm]{rki-logo}}}}

#+OPTIONS: H:2 toc:nil ltoc:t \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t email:t pri:nil todo:nil stat:nil

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LaTeX_CLASS_OPTIONS: [t]
#+latex_header: \mode<beamer>{\usetheme{Amsterdam}}
#+latex_header: \mode<beamer>{\usecolortheme{rose}}
# #+BEAMER_THEME: Amsterdam

# #+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+Include: "../inc/preamble-talk.org"

#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+PROPERTY: header-args:fsharp :tangle ../src/4/00_slides.fsx

* Ziel [1/1]
** DONE Programm
   CLOSED: [2021-04-09 Fri 00:19]

- Domain Driven Design (DDD)
- Property Based Testing

* DDD (Domain Driven Design) [8/8]
** DONE DDD
   CLOSED: [2021-04-09 Fri 00:19]

$\leadsto$ [[./4.1 DDD_With_Fsharp.pdf][Domain Driven Design]]

** DONE Prinzipien
   CLOSED: [2021-04-09 Fri 00:18]

- Verwende die Sprache der Domäne (ubiquitous Language)
- Values und Entities
- der Code ist das Design (kein UML nötig)
- Design mit (algebraischen) Typen
  - Option statt Null
  - DU statt Vererbung
- illegale Konstellationen sollten nicht repräsentierbar sein!

** DONE Pause
   CLOSED: [2021-04-09 Fri 00:18]
*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

Are you quite sure that all those bells and whistles, all those wonderful facilities of your so called powerful programming languages, belong to the solution set rather than the problem set?

\null\hfill -- Edsger Dijkstra

** DONE DDD Übung 1 (Contacts)
   CLOSED: [2021-04-09 Fri 00:18]

A Contact has

- a personal name 
- an optional email address 
- an optional postal address 
- Rule: a contact must have an email or a postal address 

A Personal Name consists of a first name, middle initial, last name

- Rule: the first name and last name are required 
- Rule: the middle initial is optional 
- Rule: the first name and last name must not be more than 50 chars 
- Rule: the middle initial is exactly 1 char, if present 

A postal address consists of a four address fields plus a country

- Rule: An Email Address can be verified or unverified

** DONE DDD Übung 2 (Payments)
   CLOSED: [2021-04-09 Fri 00:18]

The payment taking system should accept:

- Cash
- Credit cards
- Cheques
- Paypal
- Bitcoin

A payment consists of a:

- payment
- non-negative amount

After designing the types, create functions that will:

- print a payment method
- print a payment, including the amount
- create a new payment from an amount and method

** DONE Übung 3 (Refactoring)
   CLOSED: [2021-04-09 Fri 11:43]

Much C# code has implicit states that you can recognize by fields called "IsSomething", or nullable date.

This is a sign that states transitions are present but not being modelled properly.

** DONE Übung 4 (Shopping Cart)
   CLOSED: [2021-04-09 Fri 11:43]

Create types that model an e-commerce shopping cart.

Rule: "You can't remove an item from an empty cart"
Rule: "You can't change a paid cart"
Rule: "You can't pay for a cart twice"

States are:
- Empty
- ActiveCartData
- PaidCartData
  
** DONE Pause
   CLOSED: [2021-04-09 Fri 00:18]
*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

About the use of language: it is impossible to sharpen a pencil with a blunt axe. 
It is equally vain to try to do it with ten blunt axes instead.

\null\hfill -- Edsger Dijkstra

* Property Based Testing [7/7]
** DONE Example Based Tests :)
   CLOSED: [2021-04-09 Fri 00:18]

#+begin_src fsharp :results output :exports none
open System
#r "../src/4/02_PBT/lib/Expecto.dll"
open Expecto
let expectoConfig = {defaultConfig with colour = Expecto.Logging.ColourLevel.Colour0}
#load "../src/4/02_PBT/A1_Add_Implementations.fsx"
open A1_Add_Implementations
#+end_src

#+RESULTS:
: --> Referenced '/Users/kirchnerg/Desktop/courses/course.2021.hwr.fun/slides/../src/4/02_PBT/lib/Expecto.dll' (file may be locked by F# Interactive process)
: 
: Binding session to '/Users/kirchnerg/Desktop/courses/course.2021.hwr.fun/slides/../src/4/02_PBT/lib/Expecto.dll'...

#+begin_src fsharp :results output :exports both :eval no
module Test1 =
    open Implementation1
    let tests = testList "implementation 1" [
        test "add 1 3 = 4" {
            let actual = add 1 3
            let expected = 4
            Expect.equal expected actual "" }
        test "add 2 2 = 4" {
            let actual = add 2 2
            let expected = 4
            Expect.equal expected actual "" } ];;
runTests expectoConfig Test1.tests
#+end_src

#+RESULTS:
: [00:51:05 INF] EXPECTO? Running tests... <Expecto>
: [00:51:05 INF] EXPECTO! 2 tests run in 00:00:00.0102279 for implementation 1 ? 
: 2 passed, 0 ignored, 0 failed, 0 errored. Success! <Expecto>

** DONE Evil Developer From Hell :(
   CLOSED: [2021-04-09 Fri 00:18]

#+begin_src fsharp :results value :exports both
module Implementation1 =
    let add x y =
        4
#+end_src

#+RESULTS:
: module Implementation1 = begin
:   val add : x:'a -> y:'b -> int
: end

** DONE PBT
   CLOSED: [2021-04-09 Fri 00:18]

$\leadsto$ [[./4.2 An introduction to property based testing.pdf][Property Based Testing]]

** DONE FsCheck
   CLOSED: [2021-04-09 Fri 00:18]

#+begin_src fsharp :results output :exports none
open System
#r "../src/4/02_PBT/lib/FsCheck.dll"
#+end_src

#+RESULTS:

#+begin_src fsharp :results output :exports both
let add1 x y = x + y
let add2 x y = x - y
let commutativeProperty f x y =
   let result1 = f x y
   let result2 = f y x
   result1 = result2;;
FsCheck.Check.Quick (commutativeProperty add1)
FsCheck.Check.Quick (commutativeProperty add2)
#+end_src

#+RESULTS:
: Ok, passed 100 tests.
: Falsifiable, after 1 test (1 shrink) (StdGen (1673689149, 296875492)):
: Original:
: 0
: -1
: Shrunk:
: 0
: 1

** DONE FsCheck (Generate)
   CLOSED: [2021-04-09 Fri 00:18]

#+begin_src fsharp :results output :exports both
type Temp = F of int | C of float;;
let fGen =
    FsCheck.Gen.choose(32,212)
    |> FsCheck.Gen.map (fun i -> F i);;
let cGen =
    FsCheck.Gen.choose(0,100)
    |> FsCheck.Gen.map (fun i -> C (float i));;
let tempGen =
    FsCheck.Gen.oneof [fGen; cGen]

let test = tempGen |> FsCheck.Gen.sample 0 100
test
#+end_src

#+RESULTS:
#+begin_example
val tempGen : FsCheck.Gen<Temp> = Gen <fun:Bind@88>
val test : Temp list =
  [C 68.0; C 88.0; C 78.0; C 98.0; F 41; F 199; F 167; F 144; C 7.0; C 27.0;
   C 17.0; C 37.0; C 27.0; F 160; F 128; F 105; F 73; C 67.0; C 57.0; C 77.0;
   C 67.0; F 121; C 77.0; C 97.0; C 33.0; F 47; F 115; F 120; C 34.0; C 86.0;
   F 43; F 68; F 194; F 113; C 68.0; C 73.0; C 63.0; C 83.0; C 73.0; F 41;
   F 190; F 167; F 135; C 12.0; C 2.0; C 22.0; C 12.0; F 183; F 151; F 128;
   F 96; F 73; C 42.0; C 62.0; C 52.0; C 72.0; F 112; F 89; F 57; F 34; F 183;
   C 1.0; C 92.0; C 11.0; C 1.0; F 50; F 199; F 176; F 144; C 41.0; C 31.0;
   C 51.0; C 41.0; C 61.0; F 160; F 137; F 105; F 82; C 71.0; C 91.0; C 81.0;
   C 0.0; F 121; F 98; F 66; F 43; F 192; C 30.0; C 20.0; C 40.0; C 30.0; F 59;
   F 208; F 185; C 50.0; F 130; C 44.0; C 1.0; F 165; C 89.0]
#+end_example

** DONE FsCheck (Shrink)
   CLOSED: [2021-04-09 Fri 00:18]

#+begin_src fsharp :results output :exports both
open FsCheck
let smallerThan81Property x = x < 81
FsCheck.Check.Quick smallerThan81Property

let test1 = FsCheck.Arb.shrink 100 |> Seq.toList
let test2 = FsCheck.Arb.shrink 88 |> Seq.toList
test2
#+end_src

#+RESULTS:
: Ok, passed 100 tests.
: val smallerThan81Property : x:int -> bool
: val test1 : int list = [0; 50; 75; 88; 94; 97; 99]
: val test2 : int list = [0; 44; 66; 77; 83; 86; 87]

** DONE Auswahl der Eigenschaften
   CLOSED: [2021-04-09 Fri 00:17]

- Unterschiedlicher Weg, gleiches Ziel (Map(f)(Option(x))=Option(f x))
- Hin und Her (z.B. Reverse einer Liste)
- Invarianten (z.B. Länge einer Liste bei Sortierung)
- Idempotenz (noch einmal bringt nichts mehr)
- Divide et Impera! (teile und herrsche)
- Hard to prove, easy to verify (Primzahlzerlegung)
- Test-Orakel (z.B. einfach aber langsam)

* Ende [3/3]
** DONE Zusammenfassung
   CLOSED: [2021-04-09 Fri 00:17]

- funktionales Domain Modeling (DDD)
- eigenschaftsbasiertes Testen (Property Based Testing)

** DONE Links
   CLOSED: [2021-04-09 Fri 00:17]

- [[https://fsharpforfunandprofit.com/ddd/][Domain Driven Design]]
- [[https://fsharpforfunandprofit.com/books/][Domain Modeling Made Functional]]
- [[https://github.com/fscheck/FsCheck][FsCheck]]
- [[https://fsharpforfunandprofit.com/posts/property-based-testing/][An introduction to property-based testing]]
- [[https://fsharpforfunandprofit.com/posts/property-based-testing-2/][Choosing properties for property-based testing]]

** DONE Hausaufgabe
   CLOSED: [2021-04-09 Fri 00:17]

- exercism.io (E-Mail bis 16.4)
  - [ ] Accumulate
  - [ ] Space Age
  - [ ] Poker (Programmieraufgabe)
  
* Sample                                                           :noexport:
 
** Frame 1

*** Thanks to Eric Fraga :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ENV: block
:END:

for the first viable Beamer setup in Org

*** Thanks to everyone else :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ACT: <2->
:BEAMER_ENV: block
:END:

for contributing to the discussion

